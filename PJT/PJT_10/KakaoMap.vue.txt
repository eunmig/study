<template>
    <div>
        <div id="map"></div>
        <div>
            <input v-model="keyword" type="text" id="keyword" placeholder="장소 검색 키워드" />
            <button @click="searchPlaces">장소 검색</button>
        </div>
        <ul id="placesList"></ul>
        <div id="pagination"></div>
    </div>
</template>
  
<script>
import { toRaw } from "vue";
export default {
name: "KakaoMap",
data() {
    return {
        map: null,
        markers: [],
        infowindow: null,
        keyword: "",
        Places: null
    };
},
mounted() {
    if (window.kakao && window.kakao.maps) {
    this.initMap();
    } else {
        const script = document.createElement("script");
        /* global kakao */
        script.onload = () => {
            console.log("Kakao Maps API script loaded");
            kakao.maps.load(() => {
                this.initMap()
                this.searchPlaces()
            });
        };
        script.src =
            "//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=6ea6f2ddaa643d87dd39ce1bf304f859";
        document.head.appendChild(script);
    }
    },
    methods: {
        initMap() {
            const container = document.getElementById("map");
            const options = {
                center: new kakao.maps.LatLng(33.450701, 126.570667),
                level: 5,
        };

        //지도 객체를 등록합니다.
        //지도 객체는 반응형 관리 대상이 아니므로 initMap에서 선언합니다.
        this.map = new kakao.maps.Map(container, options);

        // kakao.maps.services가 정의된 후에 ps 객체를 만들어서 사용합니다.
        const ps = new kakao.maps.services.Places();
        this.ps = ps; // ps를 데이터 속성으로 저장합니다.
    },
    searchPlaces() {
        try {
            const keyword = this.keyword.trim();
            if (!keyword) {
                alert("키워드를 입력해주세요!");
                return;
            }
            const ps = new kakao.maps.services.Places();
            ps.keywordSearch(keyword, (data, status, pagination) => {
                this.placesSearchCB(data, status, pagination);
            });
        } catch (error) {
            console.error("Error in searchPlaces:", error);
        }
    },
    placesSearchCB(data, status, pagination) {
      if (status === kakao.maps.services.Status.OK) {
        this.displayPlaces(data);
        this.displayPagination(pagination);
      } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
        alert("검색 결과가 존재하지 않습니다.");
      } else if (status === kakao.maps.services.Status.ERROR) {
        alert("검색 결과 중 오류가 발생했습니다.");
      }
    },

    changeSize(size) {
    const container = document.getElementById("map");
    container.style.width = `${size}px`;
    container.style.height = `${size}px`;
    toRaw(this.map).relayout();
    },

    displayMarker(markerPositions) {
    if (this.markers.length > 0) {
        this.markers.forEach((marker) => marker.setMap(null));
    }

    const positions = markerPositions.map(
        (position) => new kakao.maps.LatLng(...position)
    );

    if (positions.length > 0) {
        this.markers = positions.map(
        (position) =>
            new kakao.maps.Marker({
            map: toRaw(this.map),
            position,
            })
        );

        const bounds = positions.reduce(
        (bounds, latlng) => bounds.extend(latlng),
        new kakao.maps.LatLngBounds()
        );

        toRaw(this.map).setBounds(bounds);
    }
    },

    displayInfoWindow() {
    if (this.infowindow && this.infowindow.getMap()) {
        //이미 생성한 인포윈도우가 있기 때문에 지도 중심좌표를 인포윈도우 좌표로 이동시킨다.
        toRaw(this.map).setCenter(this.infowindow.getPosition());
        return;
    }

    var iwContent = '<div style="padding:5px;">Hello World!</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다
        iwPosition = new kakao.maps.LatLng(33.450701, 126.570667), //인포윈도우 표시 위치입니다
        iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다

    this.infowindow = new kakao.maps.InfoWindow({
        map: toRaw(this.map), // 인포윈도우가 표시될 지도
        position: iwPosition,
        content: iwContent,
        removable: iwRemoveable,
    });

    toRaw(this.map).setCenter(iwPosition);
    },
},
};
</script>
  
<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
#map {
width: 400px;
height: 400px;
}

.button-group {
margin: 10px 0px;
}

button {
margin: 0 3px;
}
</style>